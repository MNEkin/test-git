File pluginFolder = new File(PLUGIN_FOLDER);
        if (!pluginFolder.exists())
        {
            if (pluginFolder.mkdirs())
            {
                System.out.println("Created plugin folder");
            }
        }

        File[] files = pluginFolder.listFiles(((dir, name) -> name.endsWith(".jar")));
        ArrayList <URL> urls = new ArrayList <>();
        ArrayList <String> classes = new ArrayList <>();
        if (files != null)
        {
            for (File file : files)
            {
                try
                {
                    JarFile jarFile = new JarFile(file);
                    urls.add(new URL("jar:file:" + PLUGIN_FOLDER + "/" + file.getName() + "!/"));
                    System.out.println("jar:file:" + PLUGIN_FOLDER + "/" + file.getName() + "!/");
                    jarFile.stream().forEach(jarEntry ->
                    {
//                        System.out.println("Jar Entry name : " + jarEntry.getName());
                        if (jarEntry.getName().endsWith(".class"))
                        {
                            classes.add(jarEntry.getName());
                        }
                    });
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
            URLClassLoader pluginLoader = new PluginClassLoader(urls.toArray(new URL[urls.size()]));
            classes.forEach(s ->
            {
                try
                {
                    //This won't work if not replaced
                    Class classs = pluginLoader.loadClass(s.replaceAll("/", ".").replace(".class", ""));
                    Class[] interfaces = classs.getInterfaces();
                    for (Class anInterface : interfaces)
                    {

                        if (anInterface == Plugin.class)
                        {
                            Plugin plugin = (Plugin) classs.newInstance();
                            if (plugin.load())
                            {
                                System.out.println("Loaded plugin " + classs.getCanonicalName() + " successfully");
                            }
                            break;
                        }
                    }
                }
                catch (ClassNotFoundException | InstantiationException | IllegalAccessException e)
                {
                    e.printStackTrace();
                }
            });
        }